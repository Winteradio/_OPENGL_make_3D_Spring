/*
* glViewport(int x, int y, int 넓이, int 높이)
*	창 내에서 OpenGl의 렌더링이 진행될 영역을 설정할 수 있다
*	x와 y는 시작되는 위치이고 넓이와 높이는 시작되는 위치에서 넓이와 높이를 의미한다
*
* [대상 행렬 지정하는 "행렬모드"]
* glMatrixMode(GL_PROJETION)
*	glMatrixMode는 투영행렬과 모델행렬을 불러오는 함수로써
*	GL_PROJECTION / GL_MODELVIEW / GL_TEXTURE
*	!! OpenGL은 행렬을 통해서 모델을 표현한다
*	GL_MODELVIEW( 모델 뷰 변황 행렬 ) : 모델뷰 행렬을 불러와 이 행렬에 모델의 버텍스들을 곱해져서 최종적인 모델의 위치 생성
*	GL_PROJECTION( 투영 행렬 ) : 생성된 투영 행렬에 곱해져서 최종적으로 화면에 출력
*	GL_TEXTURE( 텍스처 행렬 ) :
*	GL_COLOR( 색상 행렬) :
*	!! 모델뷰 행렬은 모델의 위치를 잡아주고 투영행렬은 그렇게 생성된 모델들을 최종적으로 출력
* ------------------------------------------------------------
*
* [관측 변환]
* gluLookAt(Eye[3], at[3], up[3])
*	카메라를 나타내는 함수
*	관측이란 3차원 공간의 장면을 바라본다
*	eye : 카메라의 포지션 벡터(위치를 나타낸다)
*	at : 카메라의 초점 벡터(카메라가 쳐다보는 방향을 나타낸다)
*	up : 카메라의 윗방향 벡터(카메라의 윗방향을 나타낸다 - 카메라가 회전 X)
* ------------------------------------------------------------
*
* [모델링 변환]
* glTranslate[f,d](GLfloat x, GLfloat y, GLfloat z)
*	f : 거의 대부분 이것을 사용한다
*	d :
*	x,y,z : 직교 좌표계 방향으로 이동한다.
*
* glRotate[f,d](GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
*	f :
*	d :
*	angle : 회전하는 각도
*	[x,y,z] : 이 방향 벡터를 축으로 angle로 반시계 방향으로 회전
*
* glScalef(GLfloat x, GLfloat y, Glfloat z)
*	[x,y,z] : sx,sy,sz배만큼 되도록 크기를 조절하는 함수이다
*
*
* [모델 뷰 행렬 리셋]
* glLoadIdentity()
*	현재 행렬을 초기화(단위행렬)시킨다.
*	투영행렬과 모델뷰 행렬에 서로 영향을 주지 않고 현재 선언된 행렬에만 영향을 미친다.
* ------------------------------------------------------------
*
*
* [원근 투영]
* gluPerspective(시야각, 종횡비, 앞면, 뒷면)
*	원근 투영을 만들어 낸다
*	종횡비 : 높이와 넓이의 비율을 의미한다.
*	앞면 : 그림의 near을 의미
*	뒷면 : 그림의 far을 의미
*	!! 같은 역할의 함수로는 glFrustum
*
* glFrustum(left, right, bottom, top, zNear, zFar)
*
* ------------------------------------------------------------
*
*
* [직교 투영]
* glortho(left, right, bottom, top, near, far)
*
* ------------------------------------------------------------
*
* [WGL]
* HDC >> hdc
* HGLRC >> hglrc
* 
* "파리미터" : hdc / 함수가 생성하는 적합한 OpenGL 랜더링 컨택스트에 대한 디바이스 컨택스트 핸들
* 
* "반환 값" : 함수가 성공하면, 유효한 OpenGL 랜더링 컨택스트의 핸들을 반환
*			함수가 실패하면, NULL을 반환
*			확장된 오류 정보를 얻으려면, GetLastError를 호출
* 
* "주의" : 랜더링 컨택스트 != 디바이스 컨택스트
*			랜더팅 컨택스트를 생성하기 전에 디바이스 컨택스트의 픽셀 포멧을 설정
*			디바이스 컨택스트의 픽셀 포멧에 대한 자세한 정보를 "SetPixelFormat" 함수 확인
* 
* wglCreateContext()
*	랜더링 컨택스트를 생성한다
*	hdc가 가리키는 장치에 그리는 데 적합한 새로운 OpenGL 랜더링 컨텍스트를 생성한다
*	랜더팅 컨택스트는 디바이스 컨택스트와 동일한 픽셀 포멧을 갖는다
*
* wglDeleteContext()
*	랜더링 컨택스트를 삭제한다
*
* wglMakeCurrent()
*	현재 랜더링 컨텍스트를 설정한다.
*
* wglGetProcAddress()
*	확장함수 포인터를 리턴한다
*
* wglUseFontBitmap()
*	현재 선택된 GDI 폰트에 대해 OpenGL 디스플레이 리스트를 만든다
*
* wglUseFontOutlines()
*	현재 외곽선 글꼴과 같은 것에 디스플레이 리스트를 만든다.
* ------------------------------------------------------------
*
* [GLUT]
* glutTimerFunc()
*	지정된 시간 후에 지정된 함수를 한번 호출한다.
*	다시 호출할려면 함수를 재호출
* ------------------------------------------------------------
*
* [픽셀 형식]
* ChoosePixelFormat()
*	가장 근접한 픽셀형식을 결정한다
*
* SetPixelFormat()
*	픽셀형식을 디바이스 컨텍스트에 설정한다.
* ------------------------------------------------------------
*
* [화면설정]
* ChangeDisplaySetting()
*	전체화면으로 바꾼다
*
* SwapBuffer()
*	후면버퍼를 전면버퍼로 교체
*
* glClear()
*	화면과 버퍼를 지운다
*
* glClearColor()
*	화면배경 색상을 설정한다.
* ------------------------------------------------------------
*
* [그리기]
* glBegin()
*	기본도형 그리기를 시작한다
*
* glEnd()
*	기본도형 그리기를 마친다.
*
* glVertex()
*	정점을 지정한다
*
* glColor()
*	색을 지정한다.
* ------------------------------------------------------------
*
* [점과 선 크기]
* glPointSize()
*	점의 크기를 변경한다
*
* glLineWidth()
*	선의 굵기를 변경한다
*
* glLineStipple()
*	점선패턴을 설정한다
* ------------------------------------------------------------
*
* [기타도형 그리기]
* glRectf()
*	사각형을 그린다.
*
* auxSolidCube()
*	정육면체를 그린다
*
* auxSolidShpere()
*	구를 그린다
*
* auxSolidTorus()
*	원환을 그린다
* ------------------------------------------------------------
*
* [상태알기]
* glGetString()
*	OpenGL의 버전, 확장들의 목록을 알아낸다
*
* glGetBooleanv()
*	GLboolean 타입의 상태를 알아낸다
*
* glGetDoublev()
*	GLdouble 타입의 상태를 알아낸다
*
* glGetFloatv()
*	GLfloat 타입의 상태를 알아낸다
*
* glGetIntegerv()
*	GLint 타입의 상태를 알아낸다
*
* glIsEnable()
*	기능을 활성화시킨다
*
* glDisable()
*	기능을 비활성화시킨다.
* ------------------------------------------------------------
*
* [행렬]
* glMatrixMode()
*	현재 행렬을 설정한다
*
* glLoadIdentity()
*	현재의 행렬을 단위행렬로 만든다
*
* glLoadMatrix()
*	지정된 행렬을 최상위 행렬스택에 로드한다
*
* glMultiMatrix()
*	현재 행렬과 지정된 행렬을 곱한다
* ------------------------------------------------------------
*
* [스택]
* glPushAttrib()
*	현재 설정을 임시 저장한다
*
* glPopAttrib()
*	이전 설정을 복원한다
* ------------------------------------------------------------
*
* [조망변환] - 카메라 설정
* gluLookAt()
*	카메라의 위치와 방향을 설정한다
* ------------------------------------------------------------
*
* [모델링 변환]
* glRotate()
*	방향을 설정 및 변환
*
* glTranslate()
*	위치를 설정 및 변환
*
* glScale()
*	확대 및 축소 변환
* ------------------------------------------------------------
*
* [투영]
* glOrtho()
*	범위가 정해진 직교투영
*
* gluOrth2D()
*	범위가 -1 ~ 1 인 직교투영
*
* glFrustum()
*	비대칭 절두체 원근투영
*
* gluPerspective()
*	원근 투영
*
* glViewport()
*	뷰포트를 설정한다
* ------------------------------------------------------------
*
* [셰이딩]
* glshadeModel()
*	셰이디방식을 설정한다
* ------------------------------------------------------------
*
* [조명]
* glMaterial()
*	표면 재질 설정
*
* glLight()
*	공원 설정
*
* glColorMaterial()
*	glColor로 설정된 색이 재질 속성으로 설정되게 한다
*
* glLightModel()
*	조명 모델을 설정한다
*
* glNormal3()
*	정규화된 법선벡터를 설정한다
* ------------------------------------------------------------
*
* [혼합]
* glBlendFunc()
*	원본과 대상의 혼합을 설정
* ------------------------------------------------------------
*
* [깊이]
* glDepthMask()
*	깊이 버퍼모드(읽기전용, 쓰기)를 설정한다
* ------------------------------------------------------------
*
* [비트맵]
* glRasterPos()
*	비트맵이나 이미지가 그려질 위치를 설정한다. 좌측하단부터 그린다
*
* glBitmap()
*	비트맵을 그린다
*
* glDrawPixels()
*	픽셀맵을 그린다
*
* glReadPixels()
*	픽셀을 읽어온다
*
* glCopyPixes()
*	화면데이터를 복사한다
*
* glPixelZoom()
*	이미지를 확대, 축소 및 뒤집는다
*
* glPixelStorei()
*	픽셀 저장방식을 설정한다
*
* auxDIBImageLoad()
*	DIB 이미지를로드한다
*
* AUX_RGBImageRec
*	auxDIBImageLoad로 로드된 이미지 데이터를 저장하는 구조체
* ------------------------------------------------------------
*
* [텍스쳐]
* glGenTexture()
*	텍스쳐 이름을 생성한다
*
* glBindTexture()
*	텍스쳐 이름을 텍스쳐 데이터와 연결한다
*
* glTexParameter()
*	텍스쳐의 필터링 방식을 설정한다
*
* glTexEnvi()
*	텍스쳐가 입혀질 때 텍스쳐의 색상과 기존 픽셀색상과의 관계를 설정한다
*
* glTexImage2D()
*	2D 이미지를 텍스쳐로 메모리에 로드한다
*
* glTexImage1D()
*	1D 이미지를 텍스쳐로 메모리에 로드한다
*
* glTexCoord2()
*	텍스쳐 좌표를 설정한다
*
* gluBuild2DMipmaps()
*	밉맵을 자동생성한다
*
* glTexGen()
*	텍스쳐 좌표를 자동적을 생성한다
*
*
* [예시]
* glMatrixMode(GL_MODELVIEW)
* glLoadIdentity()
* glGetFloatv(GL_MODELVIEW_MATRIX,matrix)
*	모델뷰 행렬을 불러온다 (glMatrixMode(GL_MODELVIEW))
*	단위 행렬을 초기화 (glLoadIdentity())
*	현재 행렬값을 matrix에 저장 (glGetFloatv(GL_MODELVIEW_MATRIX,matrix)
* ------------------------------------------------------------
*
*/